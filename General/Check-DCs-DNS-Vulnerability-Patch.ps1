##########
# KB numbers for fix for DNS vulnerability:
#
# KB4565524 = 2008 R2
# KB4565511 = 2016
# KB4558998 = 2019
#
##########

# Variables for KBs
$2008R2KB = "KB4565524"
$2016KB = "KB4565511"
$2019KB = "KB4558998"

###
# Create functions to check for KBs
###

# 2008 R2
function GetKB2008R2 ($server) {
    $KB = 'KB4565524'
    If ((Get-HotFix -ComputerName $server | Select -ExpandProperty HotFixID) -contains "$KB") {Write-Output "Installed"}
    Else {Write-Output "Not installed"}
}

# 2016
function GetKB2016 ($server) {
    $KB = 'KB4565511'
    If ((Get-HotFix -ComputerName $server | Select -ExpandProperty HotFixID) -contains "$KB") {Write-Output "Installed"}
    Else {Write-Output "Not installed"}
}

# 2019
function GetKB2019 ($server) {
    $KB = 'KB4558998'
    If ((Get-HotFix -ComputerName $server | Select -ExpandProperty HotFixID) -contains "$KB") {Write-Output "Installed"}
    Else {Write-Output "Not installed"}
}

###
# Lookup Domain Controllers
###

# Function to get all DCs
function Get-DCsInForest {
[CmdletBinding()]
param(
    [string]$ReferenceDomain = $env:USERDOMAIN
)
 
$ForestObj = Get-ADForest -Server $ReferenceDomain
foreach($Domain in $ForestObj.Domains) {
    Get-ADDomainController -Filter * -Server $Domain | select Domain,HostName,Site
     
}
 
}

# Get hostname of all DCs
$AllDCs = Get-DCsInForest | Select -ExpandProperty Hostname
$AllDCsTTC = $AllDCs | ? {$_ -like "*.tennant.tco.corp"}
$AllDCsTTCHostname = $AllDCsTTC -replace ".{17}$"

# Get details
$AllDCsTTCDetails = ForEach ($DC in $AllDCsTTCHostname) {Get-ADComputer -Identity $DC -Properties OperatingSystem | Select Name,OperatingSystem}
$2008R2DCs = $AllDCsTTCDetails | ? {$_.OperatingSystem -like "*2008 R2*"}
$2016DCs = $AllDCsTTCDetails | ? {$_.OperatingSystem -like "*2016*"}
$2019DCs = $AllDCsTTCDetails | ? {$_.OperatingSystem -like "*2019*"}

#####
# Check for KB on each DC and show results
#####

# Indicate script is running since nothing shows on screen
Write-Output "Running script. Please wait."

# 2008 R2
$2008R2Result=@()
$i = 1
$2008R2DCs | ForEach-Object {
    $server = $_
    $2008R2Result += New-Object PSObject -Property ([ordered]@{
    'Name' = $server.Name
    'OS' = $server.OperatingSystem
    'KB4565524' = GetKB2008R2 $server.Name
    })
$i++
}

# 2016
$2016Result=@()
$i = 1
$2016DCs | ForEach-Object {
    $server = $_
    $2016Result += New-Object PSObject -Property ([ordered]@{
    'Name' = $server.Name
    'OS' = $server.OperatingSystem
    'KB4565511' = GetKB2016 $server.Name
    })
$i++
}

# 2019
$2019Result=@()
$i = 1
$2019DCs | ForEach-Object {
    $server = $_
    $2019Result += New-Object PSObject -Property ([ordered]@{
    'Name' = $server.Name
    'OS' = $server.OperatingSystem
    'KB4558998' = GetKB2019 $server.Name
    })
$i++
}

# Export results
$2008R2Result | Export-Csv "d:\temp\2008R2DC-DNS-Patch-$2008R2KB.csv" -NoTypeInformation
$2016Result | Export-Csv "d:\temp\2016DC-DNS-Patch-$2016KB.csv" -NoTypeInformation
$2019Result | Export-Csv "d:\temp\2019DC-DNS-Patch-$2019KB.csv" -NoTypeInformation

# Close
$Shell = New-Object -ComObject "WScript.Shell"
$Button = $Shell.Popup("Files are saved to D:\Temp. Click OK to close this window.", 0, "Hello", 0)